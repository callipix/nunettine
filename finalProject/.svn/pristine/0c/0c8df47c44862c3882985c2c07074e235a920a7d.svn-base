package kr.or.ddit.onedayclass.service.impl;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.onedayclass.mapper.OnedayClassMapper;
import kr.or.ddit.onedayclass.service.OnedayClassService;
import kr.or.ddit.vo.BcityVO;
import kr.or.ddit.vo.BrtcVO;
import kr.or.ddit.vo.SpcltyRealmVO;
import kr.or.ddit.vo.SprviseAtchmnflVO;
import kr.or.ddit.vo.VOndyclProUsersVO;
import kr.or.ddit.vo.VOndyclSchdulVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class OnedayClassServiceImpl implements OnedayClassService {
	
	@Autowired
	OnedayClassMapper onedayClassMapper;
	
	@Autowired
	String uploadFolder;

	@Override
	public List<VOndyclProUsersVO> vOndyclProUsersVOList() {
		return this.onedayClassMapper.vOndyclProUsersVOList();
	}

	@Override
	public int countOndycl() {
		return this.onedayClassMapper.countOndycl();
	}

	@Override
	public String getCodeNm(String codeCd) {
		return this.onedayClassMapper.getCodeNm(codeCd);
	}

	@Override
	public List<VOndyclProUsersVO> searchClass(Map<String, Object> searchMap) {
		return this.onedayClassMapper.searchClass(searchMap);
	}

	@Override
	public List<SpcltyRealmVO> category() {
		return this.onedayClassMapper.category();
	}

	@Override
	public List<BcityVO> getBcity() {
		return this.onedayClassMapper.getBcity();
	}

	@Override
	public List<BrtcVO> brtcSelect(String bcityCode) {
		return this.onedayClassMapper.brtcSelect(bcityCode);
	}

	@Override
	public VOndyclProUsersVO detail(String ondyclNo) {
		return this.onedayClassMapper.detail(ondyclNo);
	}

	@Override
	public int getAttachNo() {
		return this.onedayClassMapper.getAttachNo();
	}

	@Override
	public int addSprviseAtchmnfl(SprviseAtchmnflVO sprviseAtchmnflVO) {
		return this.onedayClassMapper.addSprviseAtchmnfl(sprviseAtchmnflVO);
	}

	@Override
	public int createOndycl(Map<String, Object> map) {
		return this.onedayClassMapper.createOndycl(map);
	}

	@Override
	public List<SprviseAtchmnflVO> fileList(String ondyclNo) {
		return this.onedayClassMapper.fileList(ondyclNo);
	}

	@Override
	public int getInsertClNum() {
		return this.onedayClassMapper.getInsertClNum();
	}

	@Override
	public int deleteClass(String classNO) {
		return this.onedayClassMapper.deleteClass(classNO);
	}
	
	@Transactional
	@Override
	public int updateOndycl(VOndyclSchdulVO vOndyclSchdulVO) {
		Map<String, Object> map = new HashMap<String, Object>();
		int ondyclNo = vOndyclSchdulVO.getOndyclNo();
		SprviseAtchmnflVO sprviseAtchmnflVO = new SprviseAtchmnflVO();
		int sprviseAtchmnflNo = this.onedayClassMapper.thisAttachNo(ondyclNo);
		int result = 0;
		String proId = vOndyclSchdulVO.getProId();
		String ondyclSchdulDe = vOndyclSchdulVO.getOndyclSchdulDe();
		ondyclSchdulDe = ondyclSchdulDe.replaceAll("-", "");
		
		map.put("ondyclNo",ondyclNo);
		map.put("ondyclNm",vOndyclSchdulVO.getOndyclNm());
		map.put("ondyclCn",vOndyclSchdulVO.getOndyclCn());
		map.put("ondyclPc",vOndyclSchdulVO.getOndyclPc());
		map.put("ondyclPsncpa",vOndyclSchdulVO.getOndyclPsncpa());
		map.put("proId",proId);
		map.put("ondyclSchdulDe",ondyclSchdulDe);
		map.put("ondyclSchdulBeginTime",vOndyclSchdulVO.getOndyclSchdulBeginTime());
		map.put("ondyclSchdulEndTime",vOndyclSchdulVO.getOndyclSchdulEndTime());
		map.put("sprviseAtchmnflNo",sprviseAtchmnflNo);
		
		//썸네일 등록
		if(vOndyclSchdulVO.getUploadProfile() != null) {
			log.info("썸네일 메소드 시작");
			MultipartFile multipartFile = vOndyclSchdulVO.getUploadProfile();
			
			File uploadPath = new File(uploadFolder, getFolder());
			if(!uploadPath.exists()) {
				uploadPath.mkdirs();
			}
			 String uploadFileName = multipartFile.getOriginalFilename();
			 
			 UUID uuid = UUID.randomUUID();
			 uploadFileName = uuid.toString() + "_" + uploadFileName;
			 
			 File saveFile = new File(uploadPath, uploadFileName);
			 log.info("프로필사진 이름  : " + saveFile);
			 try {
				multipartFile.transferTo(saveFile);
			} catch (IllegalStateException | IOException e) {
				e.printStackTrace();
			}
			 
			 String url = "/images/" + getFolder().replace("\\", "/") + "/" + uploadFileName;
			 
			 log.info("썸네일 url : " + url);
			 map.put("ondyclThumbPhoto",url);
		}else {
			map.put("ondyclThumbPhoto",null);
		} //썸네일 사진 등록 끝
		
		//첨부파일(이미지들) 추가
		if(vOndyclSchdulVO.getUploadFile() != null) {
			log.info("첨부파일 메소드 시작");
			String originFileName = ""; //원본파일명
			String newFileName = "";
			String mimeType = ""; //파일 형식
			long size = 0; //파일 사이즈
			int seq = 1;
			
			for(MultipartFile uploadFiles : vOndyclSchdulVO.getUploadFile()) {
				originFileName = uploadFiles.getOriginalFilename();
				size = uploadFiles.getSize();
				mimeType = uploadFiles.getContentType();
				
				UUID uuid = UUID.randomUUID();
				newFileName = uuid.toString() + "_" + originFileName;
				log.info("첨부파일 정보 : " + originFileName+"/"+size+"/"+mimeType+"/"+newFileName);
				File saveFiles = new File(uploadFolder + "\\" + getFolder(), newFileName);
				String url = "/images/" + getFolder().replace("\\", "/") + "/" + newFileName;
				try {
					uploadFiles.transferTo(saveFiles);
					sprviseAtchmnflVO.setSprviseAtchmnflNo(sprviseAtchmnflNo);;
					sprviseAtchmnflVO.setAtchmnflCours(url);
					sprviseAtchmnflVO.setAtchmnflNm(originFileName);
					sprviseAtchmnflVO.setStoreAtchmnflNm(newFileName);
					sprviseAtchmnflVO.setAtchmnflTy(mimeType);
					sprviseAtchmnflVO.setAtchmnflNo(seq++);
					sprviseAtchmnflVO.setUserId(proId);
					log.info("sprviseAtchmnflVO : " + sprviseAtchmnflVO);
					
					result += this.onedayClassMapper.addSprviseAtchmnfl(sprviseAtchmnflVO);
				} catch (IllegalStateException | IOException e) {
					e.printStackTrace();
				}
			}
		}//첨부파일추가 끝
		log.info("sql가기 직전 map : " + map);
		
		result += this.onedayClassMapper.updateOndycl(map);
		result += this.onedayClassMapper.updateOndyclSchdul(map);
		
		log.info("원데이클래스 result 수 : " + result);
		
		return result;
	}
	
	public String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date);
		
		return str.replace("-", File.separator);
	}
}
