package kr.or.ddit.todaymeeting.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.chatting.service.MessageService;
import kr.or.ddit.todaymeeting.Scroll;
import kr.or.ddit.todaymeeting.VChatRoom;
import kr.or.ddit.todaymeeting.service.TodayMeetingService;
import kr.or.ddit.vo.TdmtngChSpMshgVO;
import kr.or.ddit.vo.TdmtngVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@SuppressWarnings({"unchecked", "unused"})
@RequestMapping("/todayMeeting")
public class TodayMeetingController {
	
	@Inject
	String uploadFolder;
	
	@Inject
	TodayMeetingService todayMeetingSerive;
	
	@Inject
	MessageService messageService;

	@GetMapping("/calendar")
	public String cal() {
		return "todayMeeting/cal/calendar";
	}
	
	@GetMapping("/main")
	public String main() {
		return "todayMeeting/index";
	}
	
	@GetMapping("/create")
	public String create() {
		return "todayMeeting/create";
	}
	
	@ResponseBody
	@PostMapping("/listAjax")
	public List<TdmtngVO> listAjax(@RequestBody(required=false) Map<String,Object> map) {
		
		log.info("map : " + map);
	
		List<TdmtngVO> tdmtngVOList = this.todayMeetingSerive.list(map);
		log.info("list->tdmtngVOList : " + tdmtngVOList);
		return tdmtngVOList;
	}
	
	// 내 이벤트 조회
	@GetMapping("/calendarList")
	@ResponseBody
	public List<Map<String, Object>> showAllEventInUpdate(HttpServletRequest request) throws Exception{
		
		JSONObject jsonObj = new JSONObject();
		JSONArray jsonArr = new JSONArray();
		
		HashMap<String, Object> hash = new HashMap<>();
		String userId = userId(request);
		List<TdmtngVO> list = todayMeetingSerive.findAll(userId);
		
		log.info("calList : " + list);
		
		for(TdmtngVO tdmtngcal : list) {
			hash.put("id", tdmtngcal.getTdmtngNo());
			hash.put("title", tdmtngcal.getTdmtngNm());
			hash.put("start", tdmtngcal.getTdmtngDt());
//			hash.put("todayMeetngCode", schedule.getTodayMeetngCode());
			
			jsonObj = new JSONObject(hash);
			jsonArr.add(jsonObj);
		}
		log.info("jsonArrCheck:{}",jsonArr);
		return jsonArr;
	}
	
	@GetMapping("/detail")
	public String detail(int tdmtngNo , Model model) {
		log.info("detail -> tdmtngNo : " + tdmtngNo);
		
		TdmtngVO tdmtngVO = todayMeetingSerive.detail(tdmtngNo);
		
		log.info("detail -> tdmtngVO : " + tdmtngVO);

		model.addAttribute("tdmtngVO", tdmtngVO);
		
		return "todayMeeting/detail";
	}
	
	@PostMapping("/create")
	public String create(TdmtngVO tdmtngVO , HttpServletRequest request) {
		log.info("create -> tdmtngVO : " + tdmtngVO);
		
		tdmtngVO.setUserId(userId(request));
		System.out.println("userId : " + tdmtngVO.getUserId());
		System.out.println("tdmtngVO" + tdmtngVO);
		int result = this.todayMeetingSerive.create(tdmtngVO);
		
		log.info("tdmtngVO -> result : " + result);
	
		//redirect : 새로운 URL요청
		return "redirect:/todayMeeting/detail?tdmtngNo="+tdmtngVO.getTdmtngNo();
	}
	
	@PostMapping("/update")
	public String update(TdmtngVO tdmtngVO) {
		log.info("update -> tdmtngVO : " + tdmtngVO);
		
		int result = this.todayMeetingSerive.update(tdmtngVO);
		
		log.info("tdmtngVO -> result : " + result);
		
		//redirect : 새로운 URL요청
		return "redirect:/todayMeeting/detail?tdmtngNo="+tdmtngVO.getTdmtngNo();
	}
	
	@GetMapping("/delete")
	public String delete(int tdmtngNo) {
		log.info("delete -> tdmtngno : " + tdmtngNo);
		
		int result = this.todayMeetingSerive.delete(tdmtngNo);
		
		return "todayMeeting/index";
	}
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private String userId(HttpServletRequest request) {
		//세션값으로 아이디 가져오기
			
			Object proSession = request.getSession().getAttribute("proSession");
			Object memSession = request.getSession().getAttribute("memSession");
			Object admSession = request.getSession().getAttribute("admSession");
			
			if(proSession !=null && proSession instanceof HashMap) {
				Object userId = ((HashMap<String, Object>)proSession).get("userId");
				System.out.println("proSession : "+userId);
				
				return userId != null ? userId.toString() : null;
			}
			if(memSession !=null && memSession instanceof HashMap) {
				Object userId = ((HashMap<String, Object>)memSession).get("userId");
				System.out.println("memSession : " +userId);
				
				return userId != null ? userId.toString() : null;

			}
			if(admSession !=null && admSession instanceof HashMap) {
				Object userId = ((HashMap<String, Object>)admSession).get("userId");
				System.out.println("admSession : " +userId);
				
				return userId != null ? userId.toString() : null;

			}
			return "not";
		}
	@ResponseBody
	@PostMapping("/join")
	public VChatRoom join(@RequestParam int tdmtngNo , HttpServletRequest request) {
		
		
		log.info("detail -> tdmtngNo : " + tdmtngNo);
		
		VChatRoom joinRoom = this.todayMeetingSerive.join(tdmtngNo , userId(request));
		
		log.info("joinRoom -> joinRoom : " + joinRoom);
		
		return joinRoom;
		
	}
	@ResponseBody
	@PostMapping("/myList")
	public ResponseEntity<List<VChatRoom>> myList(HttpServletRequest request) {
	    
		List<VChatRoom> myList = this.todayMeetingSerive.myList(userId(request));
	    
	    System.out.println("내방 리스트 : " + myList);
	    
	    return ResponseEntity.ok().body(myList);
	}
	@ResponseBody
	@PostMapping("/msgList")
	public Map<String, Object> roomMsg(@RequestParam("tdmtngNo") int tdmtngNo, HttpServletRequest request){
		
	    Map<String, Object> roomInfo = new HashMap<>();
//	    
//	    int size = 10;
//	    int getTotal = this.messageService.getMsgCount(tdmtngNo);
	    VChatRoom joinRoom = this.todayMeetingSerive.join(tdmtngNo , userId(request));
	    List<TdmtngChSpMshgVO> msgList = this.messageService.roomMsgList(tdmtngNo);
	    
//	    Scroll<?> msgL = new Scroll<TdmtngChSpMshgVO>(tdmtngNo, getTotal, size, msgList);
	    
	    roomInfo.put("joinRoom", joinRoom);
	    roomInfo.put("msgList", msgList);
	    
	    System.out.println("해당 방 : " + joinRoom);
	    System.out.println("메세지 리스트: " + msgList);
	    return roomInfo;
	}
}