package kr.or.ddit.chatting.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.chatting.service.ChatService;
import kr.or.ddit.chatting.vo.ChatRelayVO;
import kr.or.ddit.chatting.vo.ChatRoomVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
//
@Slf4j
//@Controller
//@RequiredArgsConstructor
//@RequestMapping("/chat")
public class ChatController {
//	private final ChatRoomRepository repository;
//	@Autowired
	private ChatService chatService;
	
	private Map<String,Object> userInfo = new HashMap<String, Object>();
	
	HttpServletRequest request;
	
//	HttpSession session = request.getSession();
 	// 현개 개설된 채팅방 리스트
	@GetMapping("/roomList")
	public String ChatRoom(Model model) {
		model.addAttribute("roomList" , this.chatService.chatRoomList());
		log.info("채팅방보여주기{}" , this.chatService.chatRoomList());
		return "chat/roomList";
	}
	// 방참가하기
	@SuppressWarnings("rawtypes")
	@GetMapping("/join")
	public String ChatRoomJoin(int roomNo , HttpServletRequest request , Model mm) {
		log.info("방참가 테스트");
		
		HttpSession session = request.getSession();

		String userId = ((HashMap)(session.getAttribute("memSession"))).get("userId").toString();

		ChatRelayVO chatRelayVO = new ChatRelayVO();
		chatRelayVO.setUserId(userId);
		log.info("chatRelayVO" , chatRelayVO);
		int result = this.chatService.joinChat(chatRelayVO);
		
		System.out.println(result);
		return "chat/room";
	}
	@GetMapping("/room")
	public String room() {
		log.info("룸입장테스트{}");
		return "chat/room";
	}
	//
	@SuppressWarnings("rawtypes")
	@ResponseBody
	@GetMapping("/joinCheck")
	public int joinCheck(int roomNo , Map<String,Object> chkCount , HttpServletRequest request) {
		
		HttpSession session = request.getSession();
		System.out.println(session.getAttributeNames());
		System.out.println("session : " + session);
		System.out.println("memSession : " + session.getAttribute("memSession"));
		chkCount = new HashMap<String, Object>();
		String userId = "testUser";
//		String userId = ((HashMap)(session.getAttribute("memSession"))).get("userId").toString();
		chkCount.put("roomNo" , Integer.toString(roomNo));
		chkCount.put("userId" , userId);
//		int result = this.chatService.joinCheck(chkCount);
//		log.info("result" , result);
//		log.info("result : " + result);
		return 0;
	}
	
//	@GetMapping("/roomJoin/{roomNo}")
//	public String RoomJoin() {
//		
//		log.info("방참가");
//		return "chat/roomJoin";
//	}
	// 채팅방 목록 조회
	@GetMapping("/rooms")
	public String rooms() {
		log.info("# All Chat Rooms");
		System.out.println("채팅방 목록 조회");
//		System.out.println("sessionUsers : " + sessionUsers);
//		System.out.println("sessions : " + sessions);
//		mav.addObject("list" , repository.findAllRooms());
		return "chat/rooms";
	}
	
	
//	@GetMapping("/room")
//    public ChatRoomVO getRoom(int roomNo, Model model){
////String userId , ChatRelayVO chatRelayVO , HttpServletRequest request
//        log.info("# get Chat Room, roomNo : " + roomNo);
//        ChatRoomVO chatRoomVO = new ChatRoomVO();
//        chatRoomVO = this.chatService.getRoomInfo(roomNo);
////        System.out.println("sessionUsers : " + sessionUsers);
////		System.out.println("sessions : " + sessions);
//        model.addAttribute("room", chatRoomVO);
//        log.info("테스트" + chatRoomVO);
//        return chatRoomVO;
//    }
//	// 채팅방 목록 조회
//	@GetMapping("/roomList")
//	public List<ChatRoomVO> roomList(ModelAndView mav){
//		
//		List<ChatRoomVO> chatRoomList = this.chatService.chatRoomList();
//		mav.setViewName("chat/roomList");
//		mav.addObject("chatRoomList" , chatRoomList);
//		System.out.println(mav);
//		return chatRoomList;
////		if(!chatRoomList.isEmpty()) {
////			mav.addObject("chatRoomList", chatRoomList);
////			mav.setViewName("chat/roomList");
////			return chatRoomList;
////		} else {
////			System.out.println("chatRoomList 어디니2" + chatRoomList);
////			mav.setViewName("chat/roomList");
////			return chatRoomList;
////		}
//	}
	// 채팅방 개설
	@ResponseBody
	@SuppressWarnings("rawtypes")
	@PostMapping("/roomCreate")
	public String create(@RequestBody String name/* , RedirectAttributes rttr */ , HttpServletRequest request) {
		
		HttpSession session = request.getSession();
		
		log.info("확인 : " + name);
		ChatRoomVO chatRoomVO = new ChatRoomVO(); ChatRelayVO chatRelayVO = new ChatRelayVO();
		log.info("확인 : " + chatRoomVO , chatRelayVO);

		String userId = ((HashMap)(session.getAttribute("memSession"))).get("userId").toString();
		chatRoomVO.setUserId(userId); chatRelayVO.setUserId(userId); chatRoomVO.setRoomName(name);		// 채팅방에 방제목
		
		System.out.println("중계테이블 유저 아이디" +chatRelayVO.getUserId());
		int result = this.chatService.insertRoom(chatRoomVO);
		log.info("insertRoom result : " + result);
		return "success";
		
	}
}
