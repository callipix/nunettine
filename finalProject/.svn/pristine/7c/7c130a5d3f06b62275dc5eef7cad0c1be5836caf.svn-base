package kr.or.ddit.pro_service.service_request.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.smartcardio.ATR;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.pro_service.service_inquiry.vo.V_SrvcBtfInqryVO;
import kr.or.ddit.pro_service.service_request.service.SrvcRequstService;
import kr.or.ddit.pro_service.service_request.vo.V_SrvcRequstVO;
import kr.or.ddit.util.ArticlePage;
import kr.or.ddit.vo.SprviseAtchmnflVO;
import kr.or.ddit.vo.SrvcRequstVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/srvcRequst")
@Slf4j
public class SrvcRequstController {
	
	@Autowired
	SrvcRequstService srvcRequstService;

	String userId = "";
	V_SrvcRequstVO vSrvcRequstVO = new V_SrvcRequstVO();
	
	public String userIdChk(HttpServletRequest request) {
		userId ="";
		HttpSession session = request.getSession();

		if(((HashMap)session.getAttribute("proSession"))!=null){
			userId = ((HashMap)session.getAttribute("proSession")).get("userId").toString();
		}else if(((HashMap)session.getAttribute("memSession"))!=null){
			userId = ((HashMap)session.getAttribute("memSession")).get("userId").toString();
		}
		return userId;
	}
	
	@GetMapping("/srvcRqList")
	public String srvcRqList(Model model, Map<String,Object> map, 
			HttpServletRequest request,
			@RequestParam(value="currentPage",required = false, defaultValue = "1")int currentPage) {

		userId = userIdChk(request);
		
		map.put("userId", userId);
		map.put("currentPage", currentPage);
		
		List<V_SrvcRequstVO> vSrvcRequstVOList =
				this.srvcRequstService.srvcRqList(map);
		
		model.addAttribute("vSrvcRequstVOList", vSrvcRequstVOList);
		log.info("srvcRqList -> vSrvcRequstVOList : " + vSrvcRequstVOList);
			
		return "srvcRq/srvcRqList";
	};
	
	//검색 목록 출력
	@PostMapping("/searchRqList")
	@ResponseBody
	public ArticlePage<V_SrvcRequstVO> searchRqList(@RequestBody(required = false) Map<String,Object> map, 
				HttpServletRequest request){
		
		userId = userIdChk(request);
		map.put("userId", userId);
		
		List<V_SrvcRequstVO> vSrvcRequstVOList =
				this.srvcRequstService.srvcRqList(map);
		
		int total = this.srvcRequstService.getTotal(map);
		log.info("[srvcRequstController] total : " + total);
		
		int size = 10;
		
		String currentPage = map.get("currentPage").toString();
		String keyword = map.get("keyword").toString();
		
		ArticlePage<V_SrvcRequstVO> data 
			= new ArticlePage<V_SrvcRequstVO>(total, Integer.parseInt(currentPage), size,vSrvcRequstVOList, keyword);
			
		String url = "/srvcRequst/srvcRqList";
		data.setUrl(url);
		
		log.info("페이징 처리 : " + data);
		return data;
	}
	
	@GetMapping("/srvcRqDetail")
	public String srvcRqDetail(@RequestParam("srvcRequstNo") int srvcRequstNo, Model model) {
		
		vSrvcRequstVO.setSrvcRequstNo(srvcRequstNo);
		vSrvcRequstVO = this.srvcRequstService.srvcRqDetail(vSrvcRequstVO, userId);
		
		int sprviseAtchmnflNo = vSrvcRequstVO.getSprviseAtchmnflNo();
		List<SprviseAtchmnflVO> sprviseAtchmnflVOList = this.srvcRequstService.getsprviseAtchmnfl(sprviseAtchmnflNo);
		
		model.addAttribute("vSrvcRequstVO", vSrvcRequstVO);
		
		return "srvcRq/srvcRqDetail";
	}
	
	//url:"/srvcRequst/processFn?srvcRequstNo="+srvcRequstNo
	@PostMapping("/processFn")
	@ResponseBody
	public Map<String, Object> processFn(@RequestParam int srvcRequstNo) {
		
		int res=0;
		res = this.srvcRequstService.processFn(srvcRequstNo, userId);
		
//		vSrvcRequstVO = srvcRqDetail(srvcRequstNo);
		
		Map<String, Object> processMap = new HashMap<String, Object>();
		processMap.put("res", res);
		processMap.put("vSrvcRequstVO", vSrvcRequstVO);
		
		return processMap;
	}
	
	@PostMapping("/acceptRequst")
	public String acceptRequst(@RequestParam("srvcRequstNo") int srvcRequstNo) {
		int res = 0;
		
		Map<String, Object> acceptMap = new HashMap<String, Object>();
		acceptMap.put("srvcRequstNo", srvcRequstNo);
		
		res = this.srvcRequstService.acceptRequst(acceptMap, userId);
		
		return "redirect:/srvcRequst/srvcRqDetail?srvcRequstNo="+srvcRequstNo;
	}
	
	@PostMapping("/rejectRequst")
	public String rejectRequst(@RequestParam("srvcRequstItyy") String srvcRequstItyy, 
								@RequestParam("rejectSrvcRequstNo") String srvcRequstNo, 
								@RequestParam("srvcRequstItyyInput") String srvcRequstItyyInput) {
		int res = 0;
		log.info("rejectRequst -> srvcRequstItyy : " + srvcRequstItyy);
		log.info("rejectRequst -> srvcRequstNo : " + srvcRequstNo);
		log.info("rejectRequst -> srvcRequstItyyInput : " + srvcRequstItyyInput);
		

		Map<String, Object> rejectMap = new HashMap<String, Object>();
		rejectMap.put("srvcRequstNo", srvcRequstNo);
		rejectMap.put("srvcRequstItyy", srvcRequstItyy);

		if(srvcRequstItyy.equals("기타")) {
			rejectMap.put("srvcRequstItyy", srvcRequstItyyInput);
		}
		
		log.info("거절 내용 : " +  rejectMap.get("srvcRequstItyy"));
		
		res = this.srvcRequstService.rejectRequst(rejectMap, userId);
		
		return "redirect:/srvcRequst/srvcRqDetail?srvcRequstNo="+srvcRequstNo;
	}
	
	@GetMapping("/srvcRqCreate")
	public String srvcRqCreate() {
		return "srvcRq/srvcRqCreate";
	}
	
	@PostMapping("/srvcRqCreatePost" )
	public String srvcRqCreatePost(@RequestParam Map<String, Object> srvcRqInfoMap, @RequestParam("uploadFiles") List<MultipartFile> uploadFiles,
									HttpServletRequest request) {
		userId = userIdChk(request);
		SrvcRequstVO srvcRequstVO = new SrvcRequstVO();
		srvcRequstVO.setSrvcRequstSj((String)srvcRqInfoMap.get("srvcRequstSj"));
		srvcRequstVO.setSrvcRequstCn((String)srvcRqInfoMap.get("srvcRequstCn"));
		srvcRequstVO.setProId((String)srvcRqInfoMap.get("proId"));
		srvcRequstVO.setMberId(userId);
		
		log.info("[srvcRequstController] srvcRqCreatePost -> uploadFiles : " + uploadFiles);
		int res = 0; 
		
		res = this.srvcRequstService.srvcRqCreatePost(srvcRequstVO, uploadFiles);
		
		return "redirect:/srvcRequst/srvcRqList";
	}
}