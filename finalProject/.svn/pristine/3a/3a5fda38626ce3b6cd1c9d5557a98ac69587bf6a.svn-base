package kr.or.ddit.admin.notice.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.admin.notice.service.NoticeService;
import kr.or.ddit.admin.notice.vo.NoticeVO;
import kr.or.ddit.util.ArticlePage;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/admin")
@Controller
public class NoticeController {
	
	@Autowired
	NoticeService noticeService;
	
	
	@GetMapping(value="/notice")
	public String noticeList(Model model){
		List<NoticeVO> list = noticeService.getAllNoticeList();
		model.addAttribute("noticeList",list);
		return "admin/notice";	
	}
		
	@GetMapping(value="/detail")
	public String noticeDetail(@RequestParam int noticeNo, Model model){
	    log.info("detail->noticeDetail:"+noticeNo);
	    NoticeVO noticeVO = this.noticeService.detail(noticeNo);
	    model.addAttribute("noticeVO", noticeVO);
	    // return "admin/detail"+noticeVO.getNoticeNo(); // 이 부분 주석 처리 또는 삭제
	    return "admin/detail";
	}
	
	
	@ResponseBody
	@PostMapping("/update")
	public int noticeUpdate(@RequestBody NoticeVO noticeVO ) {
		/*
		NoticeVO(noticeNo=1, noticeSj=null, noticeCn=준석이 시험 화이팅2, noticeWritngDt=null
		, noticeRdcnt=0, sprviseAtchmnflNo=0, mngrId=null)
		 */
		//Updates: 1
		log.info("update : " + noticeVO);
		int result = this.noticeService.update(noticeVO);
		//insert : 1
		log.info("update->result : "+result);
		return result ;
	}
	
	@ResponseBody
	@PostMapping("/delete")
	public int noticeDelete(@RequestBody NoticeVO noticeVO) {
		log.info("delete:"+noticeVO);
		
		int result = this.noticeService.delete(noticeVO);
		log.info("delete->result:"+result);
		return result;
	}
	
	//get : 데이터의 변경이 없음
	//post : 데이터의 변경이 있음
	@GetMapping(value="/create", params="register")
	public String createRegister(NoticeVO noticeVO) {
		/*
		(noticeNo=0, noticeSj=null, noticeCn=null, noticeWritngDt=null, noticeRdcnt=0, sprviseAtchmnflNo=0, mngrId=null)
		 */
		log.info("createRegister->noticeVO:" + noticeVO);
		
//		int result = this.noticeService.createRegister(noticeVO);
//		log.info("createRegister->result:"+ result);
		
//		return "redirect:/admin/notice?noticeNo="+noticeVO.getNoticeNo();
		//forwarding : jsp
		return "admin/create";
	}
	
	@PostMapping(value="/create", params="register")
	public String createRegisterPost(NoticeVO noticeVO) {
		/*
		NoticeVO(noticeNo=0, noticeSj=제목, noticeCn=<p>ㅁㄴㅇㄹㄴㅇㅁㄹㅁㄴㄹㅇㅇㄴㅁ</p>
		, noticeWritngDt=null, noticeRdcnt=0, sprviseAtchmnflNo=0, mngrId=null)
		 */
		noticeVO.setMngrId("testAdmin");
		log.info("createRegisterPost->noticeVO:" + noticeVO);
		
		int result = this.noticeService.createRegister(noticeVO);
		log.info("createRegister->result:"+ result);
		
		return "redirect:/admin/notice";
		//return "redirect:/admin/notice?noticeNo="+noticeVO.getNoticeNo();
	}
	
	@GetMapping(value="/list")
	public String list(Model model, Map<String,Object>map,
			@RequestParam(value="currentPage",required=false,defaultValue="1")int currentPage,
			@RequestParam(value="keyword", required=false, defaultValue="1")String keyword){
		
		if(map!=null) {
			keyword = (String)map.get("keyword");
			
			if(map.get("currentPage")==null) {
				map.put("currentPage",currentPage);
			}
		}else {
			map = new HashMap<String,Object>();
			map.put("keyword","");
			map.put("currentPage",1);
		}
		
		map.put("currentPage",currentPage);
		
		int total  = this.noticeService.getTotal(map);
		log.info("list->total:"+total);
		int size = 10;
		
		List<NoticeVO> noticeVOList = this.noticeService.list(map);
		log.info("list->noticeVOList:" + noticeVOList);
		
		model.addAttribute("data", new ArticlePage<NoticeVO>(total
				,currentPage, size, noticeVOList, keyword));
		
		return "admin/notice";
		
	}

		//요청URI : /admin/listAjax
		//요청파라미터 : {keyword:ㅁㅁ,currentPage:1}
		@ResponseBody
		@PostMapping(value="/listAjax")
		public ArticlePage<NoticeVO> listAjax(@RequestBody(required=false) Map<String,Object> map) throws ParseException {
			
			log.info("listAjax->map : " + map);
			
			String keyword = map.get("keyword").toString();
			int currentPage = Integer.parseInt(map.get("currentPage").toString());
			
			int total = this.noticeService.getTotal(map);
			log.info("listAjax->total"+total);
			
			int size = 10;
			
			List<NoticeVO> noticeVOList = this.noticeService.list(map);
			log.info("list->noticeVOList:" + noticeVOList);
			
			ArticlePage<NoticeVO> data = new ArticlePage<NoticeVO>(total, currentPage, size, noticeVOList, keyword);
			
			String url  = "/admin/notice";
			
			data.setUrl(url);
			
			return data;
		}
	
}
