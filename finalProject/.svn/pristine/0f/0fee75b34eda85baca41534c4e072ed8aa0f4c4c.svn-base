package kr.or.ddit.chatting.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.chatting.service.ChatService;
import kr.or.ddit.chatting.vo.AllChatRoomViewVO;
import kr.or.ddit.chatting.vo.ChatRelayVO;
import kr.or.ddit.chatting.vo.ChatRoomVO;
import kr.or.ddit.vo.UsersVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/chat")
@SuppressWarnings("rawtypes")
public class ChatController {
	
	@PostConstruct
	private void init() {
		allRoomList();
	}
	@Autowired
	private ChatService chatService;
	
	List<ChatRoomVO> allRoomList;
	List<AllChatRoomViewVO> myRoomList;
	
	HttpSession session;
	

	//id 가져오기
	String userId(HttpServletRequest request) {
		return ((HashMap) (request.getSession().getAttribute("memSession"))).get("userId").toString();
	}
	
	public List<ChatRoomVO> allRoomList(){
		// 전체방리스트 가져오기
		return this.allRoomList = this.chatService.roomList();
	}
	
	public List<AllChatRoomViewVO> myRoomList(String userId){
		// 아이디로 리스트 가져오기
		return this.myRoomList = this.chatService.myRoomList(userId);
	}
	@GetMapping("/main")		// 채팅 메인
	public String chatHome(Model model , HttpServletRequest request) {
		List<ChatRoomVO> allRoomList = this.allRoomList;
		this.myRoomList = myRoomList(userId(request));
		
		List<ChatRelayVO> myRoomUserId = new ArrayList<ChatRelayVO>();
		
		for (AllChatRoomViewVO room : myRoomList) {
		    myRoomUserId = chatService.myRoomId(room.getRoomNo()); // 방 번호로 참가중인 아이디 조회
		    List<UsersVO> joinUserIdList = new ArrayList<>();
		    for (ChatRelayVO relay : myRoomUserId) {
		        UsersVO userInfo = chatService.joinUserInfo(relay.getUserId()); // 아이디로 유저 정보 조회
		        joinUserIdList.add(userInfo);
		    }
		    room.setUserVO(joinUserIdList); // 방의 유저 리스트에 추가
		}
		
		log.info("데이터 테스트 myRoomList " + myRoomList);
		log.info("데이터 테스트 allRoomList " + allRoomList);
		log.info("데이터 테스트 myRoomUserId " + myRoomUserId);
		
		model.addAttribute("myRoomList", myRoomList);
		model.addAttribute("allRoomList", allRoomList);
		model.addAttribute("myRoomUserId", myRoomUserId);
		
		return "tiles/sidebar";
		
	}
	
	@GetMapping("/join")
	public String join(Model model ,@RequestParam int roomNo , HttpServletRequest request) {
		// 방참가
		model.addAttribute("myRoomList" , myRoomList);
		for(AllChatRoomViewVO aa : myRoomList) {
			System.out.println("내방 가져오는지 체크 : " + aa);
		}
		
		System.out.println("내방 가져오는지 체크 " + model.getAttribute("myRoomList"));
		return "chat/message";		
		
	}

	@GetMapping("/leave")
	public String leave() {
		// 방나가기
		return "chat/leave";
		
	}
	
	@GetMapping("/make")
	public String make(String roomName) {
		// 방생성
		return "chat/make";
		
	}
	
	@GetMapping("/move")
	public String move(int roomNo) {
		// 방이동
		return "chat/move";
		
	}
	@ResponseBody
	@GetMapping("/check")
	public int check(@RequestParam int roomNo , HttpServletRequest request) {

		ChatRelayVO chatRelayVO = new ChatRelayVO(roomNo, userId(request));
		
		int result = this.chatService.joinCheck(chatRelayVO);
		
		return result;
	}
	
}
