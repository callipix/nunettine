package kr.or.ddit.board.pro_story.service.impl;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.or.ddit.board.pro_story.mapper.ProStoryMapper;
import kr.or.ddit.board.pro_story.service.ProStoryService;
import kr.or.ddit.board.pro_story.vo.GoodPointVO;
import kr.or.ddit.board.pro_story.vo.ProStoryBbscttVO;
import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnailator;

@Slf4j
@Service
public class ProStoryServiceImpl implements ProStoryService {

	@Inject
	String uploadFolder;
	
	@Inject
	ProStoryMapper proStoryMapper;
	@Override
	@Transactional
	public int insert(ProStoryBbscttVO proStoryBbscttVO , MultipartHttpServletRequest multi) {
		
		int result = 0;
		
		MultipartFile multipartFile = proStoryBbscttVO.getUploadFile();
		
		log.info("proStoryBbscttVO : " + proStoryBbscttVO);
		//스프링 파일 객체
		log.info("이미지 파일명 : " + multipartFile.getOriginalFilename());
		log.info("이미지 크기    : " + multipartFile.getSize());
		// MIME(Multipurpose Internet Mail Extensions , 미디어타입) : 문서, 파일 또는 바이트 집합의 성격과 형식(확장자)
		// .jpg / .jpeg 의 MIME타입 : image/jpeg
		log.info("MIME 타입   : " + multipartFile.getContentType());
		
		//연월일 폴더 생성 설계
		// ... \\upload \\ 2024 \\ 01 \\ 30
		File uploadPath = new File(uploadFolder , getFolder());
		//연월일 폴더 생성 실행
		if(uploadPath.exists() == false) {
			uploadPath.mkdirs();
		}
		String uploadFileName =  multipartFile.getOriginalFilename();
		// 파일명 중복 방지*
		//같은 날 같은 이미지 업로드 시 파일명 중복 방지 시작----------------
        //java.util.UUID => 랜덤값 생성
        UUID uuid = UUID.randomUUID();
        //원래의 파일 이름과 구분하기 위해 _를 붙임(sdafjasdlfksadj_개똥이.jpg)
        uploadFileName = uuid.toString() + "_" + uploadFileName;
        //같은 날 같은 이미지 업로드 시 파일 중복 방지 끝----------------
        
		// 설계
		// , 의 역할 : \\
		// uploadFolder : ...upload\\2024\\01\\30 + \\ + 개똥이.jpg
//		File saveFile = new File(uploadFolder + "\\" + multipartFile.getOriginalFilename());
//		↕↕↕↕↕↕↕ 동일
		File saveFile = new File(uploadPath , uploadFileName);
		log.info("uploadPath : " + uploadPath);
		log.info("uploadFileName : " + uploadFileName);

		// 스프링파일객체.transferTo -> 실제 파일을 복사하기 때문에 try-catch로 예외처리 해야한다
		try {
			
			multipartFile.transferTo(saveFile);
			// 썸네일 처리
			// 이미지만 가능하기때문에 이미지인지 사전체크
			if(checkImageType(saveFile)) {	// 이미지가 맞다면

				FileOutputStream thumbnail = new FileOutputStream(new File(uploadPath , "s_"+ uploadFileName) );
				//썸네일 생성 -> 기존 이미지를 해당 사이즈로 축소시킨다(400 * 400)
				Thumbnailator.createThumbnail(multipartFile.getInputStream() , thumbnail , 400 , 400);
				thumbnail.close();
			};
			
			// 웹경로
			// getFolder().replace("\\" , "/") : 2024/01/30
			// /2024/01/30 sdafjasdlfksadj_개똥이.jpg
//			proStoryBbscttVO.setProStoryBbscttThumbPhoto(uploadPath + getFolder().replace("\\" , "/") + "/"	+ uploadFileName);
			//getFolder() : 2024\\04\\01(윈도우경로) => 2024/04/01(웹경로)
			proStoryBbscttVO.setProStoryBbscttThumbPhoto("/" + getFolder().replace("\\" , "/") + "/" + "s_"+ uploadFileName);
			// uuid가 적용된 파일명
			
			result = this.proStoryMapper.insert(proStoryBbscttVO);

			log.info("proStoryBbscttVO -> result : " + result);
		} catch (IllegalStateException | IOException e) {
			log.error(e.getMessage());
		}
		return result;
	}

	@Override
	public List<ProStoryBbscttVO> storyList() {
		return this.proStoryMapper.storyList();
	}

	@Override
	public ProStoryBbscttVO getStory(int storyNo) {
		ProStoryBbscttVO proStoryBbscttVO = this.proStoryMapper.getStory(storyNo);
		
		return proStoryBbscttVO;
	}

	@Override
	public int updateStory(ProStoryBbscttVO proStoryBbscttVO , MultipartHttpServletRequest multi) {
		/* 수정해야함.. 임시로 하드코딩 */
		int result = 0;
		
		MultipartFile multipartFile = proStoryBbscttVO.getUploadFile();
		
		log.info("proStoryBbscttVO : " + proStoryBbscttVO);
		//스프링 파일 객체
		log.info("이미지 파일명 : " + multipartFile.getOriginalFilename());
		log.info("이미지 크기    : " + multipartFile.getSize());
		// MIME(Multipurpose Internet Mail Extensions , 미디어타입) : 문서, 파일 또는 바이트 집합의 성격과 형식(확장자)
		// .jpg / .jpeg 의 MIME타입 : image/jpeg
		log.info("MIME 타입   : " + multipartFile.getContentType());
		
		//연월일 폴더 생성 설계
		// ... \\upload \\ 2024 \\ 01 \\ 30
		File uploadPath = new File(uploadFolder , getFolder());
		//연월일 폴더 생성 실행
		if(uploadPath.exists() == false) {
			uploadPath.mkdirs();
		}
		String uploadFileName =  multipartFile.getOriginalFilename();
		// 파일명 중복 방지*
		//같은 날 같은 이미지 업로드 시 파일명 중복 방지 시작----------------
        //java.util.UUID => 랜덤값 생성
        UUID uuid = UUID.randomUUID();
        //원래의 파일 이름과 구분하기 위해 _를 붙임(sdafjasdlfksadj_개똥이.jpg)
        uploadFileName = uuid.toString() + "_" + uploadFileName;
        //같은 날 같은 이미지 업로드 시 파일 중복 방지 끝----------------
        
		// 설계
		// , 의 역할 : \\
		// uploadFolder : ...upload\\2024\\01\\30 + \\ + 개똥이.jpg
//		File saveFile = new File(uploadFolder + "\\" + multipartFile.getOriginalFilename());
//		↕↕↕↕↕↕↕ 동일
		File saveFile = new File(uploadPath , uploadFileName);
		log.info("uploadPath : " + uploadPath);
		log.info("uploadFileName : " + uploadFileName);

		// 스프링파일객체.transferTo -> 실제 파일을 복사하기 때문에 try-catch로 예외처리 해야한다
		try {
			
			multipartFile.transferTo(saveFile);
			// 썸네일 처리
			// 이미지만 가능하기때문에 이미지인지 사전체크
			if(checkImageType(saveFile)) {	// 이미지가 맞다면

				FileOutputStream thumbnail = new FileOutputStream(new File(uploadPath , "s_"+ uploadFileName) );
				//썸네일 생성 -> 기존 이미지를 해당 사이즈로 축소시킨다(400 * 400)
				Thumbnailator.createThumbnail(multipartFile.getInputStream() , thumbnail , 300 , 300);
				thumbnail.close();
			};
			
			// getFolder().replace("\\" , "/") : 2024/01/30
			// /2024/01/30 sdafjasdlfksadj_개똥이.jpg
//			proStoryBbscttVO.setProStoryBbscttThumbPhoto(uploadPath + getFolder().replace("\\" , "/") + "/"	+ uploadFileName);
			//getFolder() : 2024\\04\\01(윈도우경로) => 2024/04/01(웹경로)
			proStoryBbscttVO.setProStoryBbscttThumbPhoto("/" + getFolder().replace("\\" , "/") + "/" + "s_"+ uploadFileName);
			// uuid가 적용된 파일명
			log.info("이미지 업데이트 확인 {}" + proStoryBbscttVO);
			log.info("이미지 업데이트 확인proStoryBbscttVO  {}" + proStoryBbscttVO.getProStoryBbscttThumbPhoto());
			result = this.proStoryMapper.updateStory(proStoryBbscttVO);

			log.info("proStoryBbscttVO -> result : " + result);
		} catch (IllegalStateException | IOException e) {
			log.error(e.getMessage());
		}
		return result;
	}

	@Override
	@Transactional
	public int deleteStory(String userId, int storyNo) {
		return this.proStoryMapper.deleteStory(userId , storyNo);
	}

	@Override
	@Transactional
	public int getStoryCount(int storyNo) {
		return this.proStoryMapper.getStoryCount(storyNo);
	}
	
	@Override
	@Transactional
	public ProStoryBbscttVO updateGood(GoodPointVO goodPointVO) {
		
		ProStoryBbscttVO psbcttVO = new ProStoryBbscttVO();
		
		psbcttVO.setProStoryBbscttNo(goodPointVO.getProStoryBbscttNo());
		
		this.proStoryMapper.goodUp(psbcttVO);
		int	result = this.proStoryMapper.goodSave(goodPointVO);
		
		System.out.println("result upup ::::" + result);
		
		if(result > 0) {
			psbcttVO = this.proStoryMapper.goodCount(psbcttVO);
		}
		return psbcttVO;
	}

	@Override
	@Transactional
	public ProStoryBbscttVO goodRemove(GoodPointVO goodPointVO) {
		
		ProStoryBbscttVO psbcttVO = new ProStoryBbscttVO();
		
		psbcttVO.setProStoryBbscttNo(goodPointVO.getProStoryBbscttNo());
		
		this.proStoryMapper.goodDown(psbcttVO);
		
		int result = this.proStoryMapper.goodRemove(goodPointVO);
		
		System.out.println("result :::: down " + result);
		
		if(result > 0) {
			psbcttVO = this.proStoryMapper.goodCount(psbcttVO);
		}
		return psbcttVO;
	}
	
	public boolean checkImageType(File file) {
      //MIME(Multipurpose Internet Mail Extensions) : 문서, 파일 또는 바이트 집합의 성격과 형식. 표준화
      //MIME 타입 알아냄. .jpeg / .jpg의 MIME타입 : image/jpeg
      String contentType;
      try {
         contentType = Files.probeContentType(file.toPath());
         log.info("contentType : " + contentType);
         //image/jpeg는 image로 시작함->true
         return contentType.startsWith("image");
      } catch (IOException e) {
         e.printStackTrace();
      }
      //이 파일이 이미지가 아닐 경우
      return false;
   }  
	
	public String getFolder() {
		 
		LocalDate now = LocalDate.now();
		
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		
		String fmtNow = now.format(dtf);
	    log.info("fmtNow ::: " +fmtNow);
	    
		return fmtNow.replace("-", File.separator);
	      
	   }

}
