package kr.or.ddit.board.pro_story.controller;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.board.pro_story.service.ProStoryService;
import kr.or.ddit.board.pro_story.vo.ProStoryBbscttVO;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Controller
@RequestMapping("/prostory")
@SuppressWarnings({"unused" , "unchecked" , "rawtypes"})
public class ProStroyController {
	
	@Autowired
	ProStoryService proStoryService;

	private String userId(HttpServletRequest request) {
		   //세션값으로 아이디 가져오기
		      
		Object proSession = request.getSession().getAttribute("proSession");
		Object memSession = request.getSession().getAttribute("memSession");
		      
		   
		if(proSession !=null && proSession instanceof HashMap) {
			Object userId = ((HashMap<String, Object>)proSession).get("userId");
			System.out.println("proSession : "+userId);
		      
			return userId != null ? userId.toString() : null;
		}
		if(memSession !=null && memSession instanceof HashMap) {
			Object userId = ((HashMap<String, Object>)memSession).get("userId");
			System.out.println("memSession : " +userId);
		      
			return userId != null ? userId.toString() : null;

		}

		return "not";
	}
	
	
	@GetMapping("/main")
	public String list() {
		
		List<ProStoryBbscttVO> list = this.proStoryService.storyList();		
		
		// 프로이야기 리스트
		return "prostory/main";
		
	}
	
	@GetMapping("/write")
	public String create(ProStoryBbscttVO proStoryBbscttVO) {
		
//		int result = this.proStoryService.createStory();
		
		return "prostory/write";
	}
	@ResponseBody
	@PostMapping("/insert")
	public int insert(@RequestParam("proStoryBbscttSj") String proStoryBbscttSj,
					  @RequestParam("proStoryBbscttCn") String proStoryBbscttCn	, HttpServletRequest request) {
		
		String userId = userId(request);
		
		if(!idCheck(userId, request)) {
			return 9;
		}
		// 프로이야기 등록
		ProStoryBbscttVO proStoryBbscttVO = new ProStoryBbscttVO(proStoryBbscttSj , proStoryBbscttCn);
		
		proStoryBbscttVO.setProId(userId);
		
		log.info("넘어오는 데이터 확인 proStoryBbscttSj " + proStoryBbscttSj );
		log.info("넘어오는 데이터 확인 proStoryBbscttCn " + proStoryBbscttCn );
		log.info("넘어오는 데이터 확인 proStoryBbscttVO " + proStoryBbscttVO );
		
		int result = this.proStoryService.insert(proStoryBbscttVO);
		
		return result;
	}
	
	public boolean idCheck(String userId ,HttpServletRequest request) {
		
		HttpSession session = request.getSession();
		
		String chkId = ((HashMap)session.getAttribute("proSession")).get("userId").toString();
		
		return userId.equals(chkId) ? true : false;
		
	}
	
	@ResponseBody
	@PostMapping("/update")
	public String update(ProStoryBbscttVO proStoryBbscttVO) {
		// 프로이야기 수정
		
		int result = this.proStoryService.updateStory();
		
		return "prostory/update";
		
	}
	
	@ResponseBody
	@PostMapping("/delete")
	public String delete(ProStoryBbscttVO proStoryBbscttVO) {
		// 프로이야기 삭제
		return "prostory/delete";
		
	}
	
	
	@ResponseBody	
	@GetMapping("/getInfo")
	public ProStoryBbscttVO getProStory() {
		// 프로이야기 글보기(선택)
		
		ProStoryBbscttVO proStoryBbscttVO = new ProStoryBbscttVO();
		
		proStoryBbscttVO = this.proStoryService.getStory();
		
		return proStoryBbscttVO;
		
	}
	
	public String goodPoint() {
		
		return "";
	}
	
}