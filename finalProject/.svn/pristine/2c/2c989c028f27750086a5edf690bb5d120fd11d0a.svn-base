<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.pro.join.mapper.ProJoinMapper">

	<select id="emailCk" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM MBER WHERE EMAIL=#{email}
	</select>
	
	<select id="idCk" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM USERS WHERE USER_ID=#{userId}
	</select>
	
	<select id="ncnmCk" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM USERS WHERE USER_NCNM=#{userNcnm}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="idSearch" resultType="usersVO" parameterType="vProUsersVO">
		SELECT USER_ID AS userId, EMPLYR_TY AS emplyrTy
		FROM V_PRO_USERS
		WHERE USER_NM=#{userNm}
		AND EMAIL=#{email}
	</select>
	<select id="idSearch2" resultType="vMberUsersVO" parameterType="vProUsersVO">
		SELECT USER_ID AS userId, EMPLYR_TY AS emplyrTy
		FROM V_MBER_USERS
		WHERE USER_NM=#{userNm}
		AND EMAIL=#{email}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="pwSearch" resultType="usersVO" parameterType="vProUsersVO">
		SELECT USER_PASSWORD AS userPassword, EMPLYR_TY AS emplyrTy
		FROM V_PRO_USERS
		WHERE PRO_ID=#{proId}
		AND EMAIL=#{email}
		AND PRO_MBTLNUM=#{proMbtlnum}
	</select>
	<select id="pwSearch2" resultType="String" parameterType="vProUsersVO">
			SELECT EMPLYR_TY AS emplyrTy
			FROM V_MBER_USERS
			WHERE MBER_ID=#{proId}
			AND EMAIL=#{email}
		</select>
	
	<!-- 임시비밀번호 적용-->
	<update id="updatePw" parameterType="hashMap">
		UPDATE USERS
		SET USER_PASSWORD=#{imsiPw}
		WHERE USER_ID=#{proId}
	</update>
	
	<!-- 프로 로그인 -->
	<resultMap type="usersVO" id="usersMap">
			<result property="cnt" column="cnt"/>
			<result property="emplyrTy" column="emplyrTy"/>
			<result property="userNcnm" column="userNcnm"/>
		</resultMap>
	<select id="proLogin" parameterType="hashMap" resultMap="usersMap">
		SELECT USER_ID AS userId, COUNT(*) AS cnt, EMPLYR_TY AS emplyrTy, USER_NCNM AS userNcnm
		FROM USERS
		WHERE USER_ID=#{userId} AND USER_PASSWORD=#{userPassword}
		GROUP BY EMPLYR_TY, USER_NCNM, USER_ID
	</select>
	
	<select id="getAdres" parameterType="hashMap" resultType="adresVO">
			SELECT ADRES, DETAIL_ADRES, ZIP
			FROM ADRES WHERE USER_ID = #{userId}
		</select>
	
	<!-- 프로필 사진 출력 -->
	<select id="getProfile" parameterType="hashMap" resultType="vProUsersVO">
		SELECT PRO_ID, PRO_MBTLNUM, SEXDSTN_TY, EMAIL, USER_NM, SPCLTY_REALM_CODE, USER_PASSWORD, EMPLYR_TY, SECSN_AT, USER_NCNM, USER_ID, PRO_PROFL_PHOTO
		FROM V_PRO_USERS
		WHERE PRO_ID = #{userId}
	</select>
	
	<!-- 프로 회원가입 -->
	<insert id="proInsert" parameterType="hashMap">
		INSERT ALL
		    INTO USERS(USER_ID, USER_NM, USER_PASSWORD, EMPLYR_TY,USER_NCNM)
		    VALUES(#{userId},#{userNm},#{userPassword},'ET02',#{userNcnm})
		    
		    INTO PRO(PRO_ID, PRO_MBTLNUM, SEXDSTN_TY, EMAIL, PRO_PROFL_PHOTO, SPCLTY_REALM_CODE)
		    VALUES(#{userId},#{proMbtlnum},#{sexdstnTy},#{email},#{proProflPhoto},'SR2301')
<!-- 		    VALUES(#{userId},#{proMbtlnum},#{sexdstnTy},#{email},#{proProflPhoto},#{spcltyRealmCode}) -->
		    
		    INTO AUTHOR(AUTHOR, USER_ID)
		    VALUES('ET02',#{userId})
		    
		    INTO ADRES(USER_ID, ADRES_NO, ADRES, DETAIL_ADRES, ZIP)
		    VALUES(#{userId},ADRES_SEQ.NEXTVAL,#{adres},#{detailAdres},#{zip})
		SELECT * FROM DUAL
	</insert>
	
</mapper>