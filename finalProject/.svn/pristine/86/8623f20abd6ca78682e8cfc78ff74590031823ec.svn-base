package kr.or.ddit.board.pro_story.controller;

import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.board.pro_story.service.ProStoryService;
import kr.or.ddit.board.pro_story.vo.GoodPointVO;
import kr.or.ddit.board.pro_story.vo.ProStoryBbscttVO;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Controller
@RequestMapping("/prostory")
@SuppressWarnings({"unchecked" , "rawtypes"})
public class ProStoryController {
	
	@Inject
	String uploadFolder;
	
	@Inject
	ProStoryService proStoryService;

	private String userId(HttpServletRequest request) {
	/* 세션체크 아이디 가져오기 */
	
		Object proSession = request.getSession().getAttribute("proSession");
		Object memSession = request.getSession().getAttribute("memSession");
		      
		if(proSession !=null && proSession instanceof HashMap) {
			Object userId = ((HashMap<String, Object>)proSession).get("userId");
			System.out.println("proSession : "+userId);
		      
			return userId != null ? userId.toString() : null;
		}
		if(memSession !=null && memSession instanceof HashMap) {
			Object userId = ((HashMap<String, Object>)memSession).get("userId");
			System.out.println("memSession : " +userId);
		      
			return userId != null ? userId.toString() : null;

		}

		return "not";
	}
	
	/* 메인페이지(리스트) */
	@GetMapping("/main")
	public String list(Model model) {
		
		List<ProStoryBbscttVO> list = this.proStoryService.storyList();		
		
		// 프로이야기 리스트
		model.addAttribute("ProStoryBbscttVO", list);
		
		log.info("ProStoryBbscttVO : " + list);
		
		return "prostory/main";
		
	}
	
	/* 글쓰기 페이지 이동 */
	@GetMapping("/write")
	public String create(ProStoryBbscttVO proStoryBbscttVO) {
		
		return "prostory/write";
	}
	
	/* 글 작성 */
	@ResponseBody
	@PostMapping("/insert")
	public int insert(ProStoryBbscttVO proStoryBbscttVO
					  , HttpServletRequest request
					  , MultipartHttpServletRequest multi) {
		
		String userId = userId(request);
		
		proStoryBbscttVO.setProId(userId);
		
		int result = this.proStoryService.insert(proStoryBbscttVO , multi);
		
		return result;
	}
	
	/* 아이디 체크 */
	public boolean idCheck(HttpServletRequest request) {
		
		HttpSession session = request.getSession();
		
		String userId = userId(request);
		
		String chkId = ((HashMap)session.getAttribute("proSession")).get("userId").toString();
		
		return userId.equals(chkId) ? true : false;
		
	}
	/* 글 수정 페이지 이동 */
	@GetMapping("/update")
	public String update(@RequestParam("storyNo")int storyNo , Model model) {
		
		ProStoryBbscttVO proStoryBbscttVO = this.proStoryService.getStory(storyNo);
		
		log.info("수정페이지 데이터 체크 : " + proStoryBbscttVO);
		
		model.addAttribute("getStory", this.proStoryService.getStory(storyNo));
		
		return "prostory/update";
	}
	
	/* 글 수정 */
	@ResponseBody @PostMapping("/update")
	public void storyUpdate(ProStoryBbscttVO proStoryBbscttVO
							, RedirectAttributes rttr
							, HttpServletRequest request
							, MultipartHttpServletRequest multi) {
		
		proStoryBbscttVO.setProId(userId(request));
		
		log.info("proStoryBbscttVO 아이디 세팅 후" + proStoryBbscttVO);
		
		int result = this.proStoryService.updateStory(proStoryBbscttVO, multi);
		
		rttr.addFlashAttribute("result" , result);
		
	}
	
	/* 글 삭제 */
	@ResponseBody @PostMapping("/delete")
	public int delete(HttpServletRequest request , @RequestParam int storyNo) {
		
		int result = 0;
		
		if(idCheck(request)) {
			log.info("아이디 체크 true " + idCheck(request));
			return result = this.proStoryService.deleteStory(userId(request) , storyNo);
			
		} else {
			log.info("아이디 체크 false " + userId(request));
			return result;
		}
		
	}
	
	/* 게시글 상세보기 + 조회수 증가 */
	@GetMapping("/getStory")
	public String getProStory(@RequestParam("storyNo")Integer storyNo
								, HttpServletRequest request
								, HttpServletResponse response
								, Model model) {
		
		ProStoryBbscttVO proStoryBbscttVO = this.proStoryService.getStory(storyNo);
		int count = 0;
		model.addAttribute("getStory", proStoryBbscttVO);
		
		Cookie orgCookie = null;
		Cookie[] cookies = request.getCookies();
		if(cookies != null) {
			
			for(Cookie cookie : cookies) {
				
				if(cookie.getName().equals("vistiNo")) {
					
					orgCookie = cookie;
				}
			}
		}
		
		if(orgCookie != null) {
			
			if(!orgCookie.getValue().contains("[" + storyNo.toString()+ "]")) {
				
				 count = this.proStoryService.getStoryCount(storyNo);
				
				orgCookie.setValue(orgCookie.getValue() + "["+ storyNo + "]");
				orgCookie.setPath("/");
				orgCookie.setMaxAge(60 * 60 * 24);
				response.addCookie(orgCookie);
			}
		}
			else {
				 count = this.proStoryService.getStoryCount(storyNo);
				
				Cookie newCookie = new Cookie("vistiNo" , "["+ storyNo + "]");
				newCookie.setPath("/");
				newCookie.setMaxAge(60 * 60 * 24);
				response.addCookie(newCookie);
			}
		
		return "prostory/detail";
		
	}
	
	/* 좋아요 */
	@ResponseBody
	@GetMapping("/goodUp")
	public ProStoryBbscttVO goodUp(@RequestParam("storyNo") int storyNo , HttpServletRequest request) {
		
		System.out.println("request : " + request);
		
		GoodPointVO goodPointVO = new GoodPointVO();
		
		goodPointVO.setProStoryBbscttNo(storyNo);
		
		goodPointVO.setUserId(userId(request));
		System.out.println("session setUserId : " + goodPointVO.getUserId());
		
		ProStoryBbscttVO proStoryBbscttVO = this.proStoryService.updateGood(goodPointVO);
		
		return proStoryBbscttVO;
	}
	/* 좋아요 취소 */
	@ResponseBody
	@GetMapping("/goodCancle")
	public ProStoryBbscttVO goodCancle(@RequestParam("storyNo") int storyNo , HttpServletRequest request) {
		
		GoodPointVO goodPointVO = new GoodPointVO();
		
		goodPointVO.setProStoryBbscttNo(storyNo);
		
		goodPointVO.setUserId(userId(request));
		
		ProStoryBbscttVO proStoryBbscttVO = this.proStoryService.goodRemove(goodPointVO);
		
		return proStoryBbscttVO;
	}
	
}