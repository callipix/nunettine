package kr.or.ddit.chatting.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.websocket.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.socket.WebSocketSession;

import kr.or.ddit.chatting.service.ChatService;
import kr.or.ddit.chatting.vo.ChatRelayVO;
import kr.or.ddit.chatting.vo.ChatRoomVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/chat")
public class RoomController {
//	private final ChatRoomRepository repository;
	
	@Autowired
	private ChatService chatService;
	
	// stomp 사용시 session관리 해주지 않아도 된다
	private static List<Session> sessionUsers = Collections.synchronizedList(new ArrayList<>());
	List<WebSocketSession> sessions = new ArrayList<>();
	//userId의 webSession을 저장한다
	Map<String, WebSocketSession> userSessions = new HashMap<>();
	
	@GetMapping("/roomList")
	public String ChatRoom(Model model) {
		model.addAttribute("roomList" , this.chatService.chatRoomList());
		log.info("채팅방보여주기{}" , this.chatService.chatRoomList());
		return "chat/roomList";
	}
	
//	@GetMapping("/chatTT1")
//	public String chatForm() {
//		return "chat/chatTT1";
//	}
	
	@GetMapping("/connect")
	public String connection() {
		System.out.println("연결메소드 실행");
		return "chat/connect";
	}
//	@GetMapping("/tt")
//	public String test() {
//		return "chat/formtest";
//	}
//	
	// 방참가하기
	@SuppressWarnings("rawtypes")
	@GetMapping("/join")
	public String chatJoin(String userId , ChatRelayVO chatRelayVO , HttpServletRequest request) {
		log.info("방참가 테스트");
		
		HttpSession session = request.getSession();

		userId = ((HashMap)(session.getAttribute("memSession"))).get("userId").toString();

		chatRelayVO.setUserId(userId);
		
		int result = this.chatService.joinChat(chatRelayVO);
		
		System.out.println(result);
		
		return "chat/join";
	}
	// 채팅방 목록 조회
	@GetMapping("/rooms")
	public String rooms() {
		log.info("# All Chat Rooms");
		System.out.println("채팅방 목록 조회");
		System.out.println("sessionUsers : " + sessionUsers);
		System.out.println("sessions : " + sessions);
//		mav.addObject("list" , repository.findAllRooms());
		return "chat/rooms";
	}
	
	@GetMapping("/room")
    public ChatRoomVO getRoom(int roomNo, Model model){

        log.info("# get Chat Room, roomNo : " + roomNo);
        ChatRoomVO chatRoomVO = new ChatRoomVO();
        chatRoomVO = this.chatService.getRoomInfo(roomNo);
        System.out.println("sessionUsers : " + sessionUsers);
		System.out.println("sessions : " + sessions);
        model.addAttribute("room", chatRoomVO);
        log.info("테스트" + chatRoomVO);
        return chatRoomVO;
    }
	
//	// 채팅방 목록 조회
//	@GetMapping("/roomList")
//	public List<ChatRoomVO> roomList(ModelAndView mav){
//		
//		List<ChatRoomVO> chatRoomList = this.chatService.chatRoomList();
//		mav.setViewName("chat/roomList");
//		mav.addObject("chatRoomList" , chatRoomList);
//		System.out.println(mav);
//		return chatRoomList;
////		if(!chatRoomList.isEmpty()) {
////			mav.addObject("chatRoomList", chatRoomList);
////			mav.setViewName("chat/roomList");
////			return chatRoomList;
////		} else {
////			System.out.println("chatRoomList 어디니2" + chatRoomList);
////			mav.setViewName("chat/roomList");
////			return chatRoomList;
////		}
//	}
	
	// 채팅방 개설
	@ResponseBody
	@SuppressWarnings("rawtypes")
	@PostMapping("/roomCreate")
	public String create(@RequestBody String name/* , RedirectAttributes rttr */ , HttpServletRequest request) {
		
		HttpSession session = request.getSession();
		
		log.info("확인 : " + name);
		ChatRoomVO chatRoomVO = new ChatRoomVO(); ChatRelayVO chatRelayVO = new ChatRelayVO();
		log.info("확인 : " + chatRoomVO , chatRelayVO);

		String userId = ((HashMap)(session.getAttribute("memSession"))).get("userId").toString();
		chatRoomVO.setUserId(userId); chatRelayVO.setUserId(userId); chatRoomVO.setRoomName(name);		// 채팅방에 방제목
		
		System.out.println("중계테이블 유저 아이디" +chatRelayVO.getUserId());
		int result = this.chatService.insertRoom(chatRoomVO);
		log.info("insertRoom result : " + result);
		return "success";
		
	}
//	@GetMapping("/roomCreate")
//	public String roomCreate() {
//		System.out.println("roomCreate 이동성공");
//		return "chat/roomCreate";
//	}
	
	// 특정 채팅방 조회
//	@GetMapping("/room")
//	public void getRoom(int roomNo , Model model) {
//		log.info("# get Chat Room , roomNo : " + roomNo);
//		model.addAttribute("room" , repository.findRoomById(roomNo));
//	}

}
