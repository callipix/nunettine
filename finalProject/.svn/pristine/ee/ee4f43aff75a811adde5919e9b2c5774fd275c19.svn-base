package kr.or.ddit.chatting.controller;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.socket.WebSocketSession;

import kr.or.ddit.chatting.Check;
import kr.or.ddit.chatting.service.ChatService;
import kr.or.ddit.chatting.vo.ChatJoinRoomVO;
import kr.or.ddit.chatting.vo.ChatJoinView;
import kr.or.ddit.chatting.vo.ChatRelayVO;
import kr.or.ddit.chatting.vo.ChatRoomVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
//@SessionAttributes("memSession")
@RequestMapping("/chat")
public class ChatController2 {
	
	@Autowired
	private ChatService chatService;
//	private Map<String , List<ChatRoomVO>> chatList;
//	
//	Map<String , HttpSession> map = new HashMap<>();
	
	
	
//	@PostConstruct
//	public void init() {
//		List<ChatRoomVO> roomList = this.chatService.chatRoomList();
//		chatList = new HashMap<String, List<ChatRoomVO>>();
//		chatList.put("mychatList" , roomList);
//	}
 	// 현개 개설된 채팅방 리스트
	@GetMapping("/roomList")
	public String ChatRoom(Model model) {
		
		model.getAttribute("memSession");
		model.addAttribute("roomList" , this.chatService.chatRoomList());
		log.info("채팅방보여주기{}" , this.chatService.chatRoomList());
//		System.out.println(model.getAttribute("memSession"));
		return "chat/roomList";
	}
	// 방 생성하기
	@ResponseBody
	@PostMapping("/createRoom")
	@SuppressWarnings("rawtypes")
	public String createRoom(@RequestBody String roomName ,ChatRoomVO chatRoomVO, ChatRelayVO chatRelay , HttpServletRequest request) {
		
		log.info("방생성 테스트");
		HttpSession session = request.getSession();
		
		String userId = ((HashMap)(session.getAttribute("memSession"))).get("userId").toString();
		
		chatRoomVO.setRoomName(roomName);
		chatRoomVO.setUserId(userId);			// 채팅방 유저 아이디 세팅
		chatRelay.setUserId(userId);			// 채팅방 중계테이블(N:M) 아이디세팅
		
		int result = this.chatService.insertRoom(chatRoomVO);
		
		log.info("테스트 {}" , result);
		
		return "chat/room";
	}
	// 방참가하기
	@SuppressWarnings("rawtypes")
	@GetMapping("/join")
	public ModelAndView ChatRoomJoin(int roomNo ,Map<String , Object> joinCheck, HttpServletRequest request) {
		log.info("방참가 테스트");
		ModelAndView mav = new ModelAndView();
		HttpSession session = request.getSession();

		String userId = ((HashMap)(session.getAttribute("memSession"))).get("userId").toString();
		ChatRelayVO chatRelayVO = new ChatRelayVO(roomNo ,userId);

		log.info("chatRelayVO{}" , chatRelayVO);
		// 방에 참가하고 있는지 여부 확인
		joinCheck.put("roomNo" , Integer.toString(roomNo));
		joinCheck.put("userId" , userId);
		int chkResult = this.chatService.joinCheck(joinCheck);
		
		if(chkResult == 1) {
			log.info("해당 채팅 방 참가중 {}" , chkResult);
			mav.setViewName("redirect:roomList");
			return mav;
		} else {
			getRoomJoin(roomNo);			
		}
		
		int result = this.chatService.joinChat(chatRelayVO);
		mav.addObject("chatRelay" , chatRelayVO);
		mav.setViewName("chat/room");
		
		return mav;
	}
	@GetMapping("/joinRoom")
	public String getRoomJoin(int roomNo) {
		
		ChatJoinRoomVO chatJoinRoomVO = new ChatJoinRoomVO();
		chatJoinRoomVO.setRoomNo(roomNo);
		chatJoinRoomVO = this.chatService.getRoomJoin(roomNo);
		return "chat/joinRoom";
	}
	@ResponseBody
	@GetMapping("/choice")
	public ModelAndView choiceRoom(int roomNo) {
		
		log.info("테스트{}");
		Map<String,Object> choice = new HashMap<String, Object>();
		ChatRoomVO chattingRoomVO = new ChatRoomVO();
		
		Set<WebSocketSession> sessions = new HashSet<>(); 
		System.out.println("웹소켓세션 테스트");
		System.out.println(sessions);
		
		ChatJoinView chatJoinView = new ChatJoinView();
		chatJoinView.setRoomNo(roomNo);
		chatJoinView = this.chatService.choiceRoom(roomNo);
		ModelAndView mav = new ModelAndView();
		Check.sircleCall();
		choice.put("roomNo", roomNo);
		choice.put("roomName", chatJoinView.getRoomName());
		choice.put("createDate", chatJoinView.getCreateDate());
		choice.put("userId", chatJoinView.getUserId());
		choice.put("relayUserId", chatJoinView.getUserId());
		choice.put("userNcnm", chatJoinView.getUserNcnm());
		System.out.println(choice);
		System.out.println(mav);
		mav.addObject("choice", choice);
		mav.setViewName("chat/room");
		return mav;
	}
}
