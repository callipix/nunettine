package kr.or.ddit.chatting.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;

import kr.or.ddit.chatting.service.ChatService;
import kr.or.ddit.chatting.vo.AllChatRoomViewVO;
import kr.or.ddit.chatting.vo.ChatRelayVO;
import kr.or.ddit.vo.UsersVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/chat")
public class ChatController {
	
	@Autowired
	public ChatService chatService;
	
	List<AllChatRoomViewVO> allRoomList;
	List<AllChatRoomViewVO> myRoomList;
	// 첫 실행시 모든 유저 리스트를 가져옴
	@PostConstruct
	private void init() {
		allRoomList();
	}
	@SuppressWarnings("rawtypes")
	@RequestMapping("/main")
	public ModelAndView chatHome(ModelAndView mav ,HttpServletRequest request) {
		List<AllChatRoomViewVO> allRoomList = this.allRoomList;
		HttpSession session = request.getSession();
		String userId = ((HashMap) (session.getAttribute("memSession"))).get("userId").toString();
		
		List<AllChatRoomViewVO> myRoomList = myRoomList(userId);
		List<ChatRelayVO> myRoomUserId = new ArrayList<ChatRelayVO>();
		
		for (AllChatRoomViewVO room : myRoomList) {
		    myRoomUserId = chatService.myRoomId(room.getRoomNo()); // 방 번호로 참가중인 아이디 조회
		    List<UsersVO> joinUserIdList = new ArrayList<>();
		    for (ChatRelayVO relay : myRoomUserId) {
		        UsersVO userInfo = chatService.joinUserInfo(relay.getUserId()); // 아이디로 유저 정보 조회
		        joinUserIdList.add(userInfo);
		    }
		    room.setUserVO(joinUserIdList); // 방의 유저 리스트에 추가
		}
		mav.addObject("myRoomUserId" ,myRoomUserId );
		mav.addObject("allRoomList" , allRoomList);
		mav.addObject("myRoomList", myRoomList);
		mav.setViewName("chat/chatForm");
		log.info("main 페이지 이동 성공{}");
		return mav;
	}
	// 내가 참가한 채팅방 가져오기
	private List<AllChatRoomViewVO> myRoomList(String userId){
		myRoomList = this.chatService.myRoomList(userId);
		return myRoomList;
	}
	// 모든 채팅방
	private List<AllChatRoomViewVO> allRoomList(){
		this.allRoomList = this.chatService.roomList();
		return allRoomList;
	}
	
	// 채팅방 이동
	@SuppressWarnings("rawtypes")
	@RequestMapping("/choice")
	public ModelAndView chatForm(Model model ,HttpServletRequest request) {
		HttpSession session = request.getSession();
		String userId = ((HashMap) (session.getAttribute("memSession"))).get("userId").toString();
		ModelAndView mav = new ModelAndView();
		model.addAttribute("allRoomList" , this.allRoomList);
		log.info("chat form페이지 이동 성공 {}" ,"ㅇㅇㅁㄴㅇ");
		mav.setViewName("chat/choice");
		return mav;
	}
	@ResponseBody
	@PostMapping("/start")
	public String joinRoom(Model model, @RequestBody ChatRelayVO chatRelayVO , HttpServletRequest request) {
		HttpSession session = request.getSession();
		String userId = ((HashMap) (session.getAttribute("memSession"))).get("userId").toString();
		
		if(joinCheck(chatRelayVO) == true) {
			
		} else {
			int result = this.chatService.joinRoom(chatRelayVO);
		}
		return "chat/start";
	}
	@ResponseBody
	@PostMapping("/joinCheck")
	public boolean joinCheck(@RequestBody ChatRelayVO chatRelayVO) {
		
		int result = this.chatService.joinCheck(chatRelayVO);
		return result == 1 ? true : false;
		
	}
//	@GetMapping("/message")
//	public String message() {
//		return "chat/message";
//	}
	@ResponseBody
	@RequestMapping("/join")
	public ModelAndView findRoomsById(int roomNo) throws JsonProcessingException{
		ModelAndView mav = new ModelAndView();
		List<AllChatRoomViewVO> myRoomList = this.chatService.roomByRoomNo(roomNo);
		log.info("내방 테스트" + myRoomList);
		String result = new Gson().toJson(myRoomList);
		System.out.println(result);
		ObjectMapper objectMapper = new ObjectMapper();
		String myList = objectMapper.writeValueAsString(myRoomList);
		
		mav.addObject("myList" , myList);
		mav.setViewName("chat/message");
		return mav;
	}
}
