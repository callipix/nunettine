package kr.or.ddit.pro.join.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.collections.map.HashedMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.pro.join.service.ProJoinService;
import kr.or.ddit.vo.AdresVO;
import kr.or.ddit.vo.MberVO;
import kr.or.ddit.vo.ProVO;
import kr.or.ddit.vo.UsersVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/pro")
public class ProJoinController {
	
	@Autowired
	ProJoinService proJoinService;
	
	@GetMapping("/proLogin")
	public String proLogin() {
		return "pro/proLogin";
	}
	@GetMapping("/proJoin")
	public String proJoin() {
		return "pro/proJoin";
	}
	
	//이메일 중복확인
	@ResponseBody
	@GetMapping("/emailCk")
	public int emailCk(String email) {
		int result = this.proJoinService.emailCk(email);
		
		return result;
	}
	
	//아이디 중복확인
	@ResponseBody
	@GetMapping("/idCk")
	public int idCk(String userId) {
		int result = this.proJoinService.idCk(userId);
		
		return result;
	}
	
	//닉네임 중복 확인
	@ResponseBody
	@GetMapping("/ncnmCk")
	public int ncnmCk(String userNcnm) {
		int result = this.proJoinService.ncnmCk(userNcnm);
		
		return result;
	}
	
	//휴대폰 본인인증
	@ResponseBody
	@PostMapping("/check/sendSMS")
    public String sendSMS(String proMbtlnum) {
        Random rand  = new Random();
        String numStr = "";
        for(int i=0; i < 6; i++) {
            String ran = Integer.toString(rand.nextInt(10));
            numStr+=ran;
        }
        log.info("인증번호 : " + numStr);
//        this.proJoinService.certifiedPhoneNumber(proMbtlnum,numStr);
        return numStr;
    }
	
	//프로 회원가입
	@PostMapping("/proInsert")
	public String proInsert(UsersVO usersVO, ProVO proVO, AdresVO adresVO) {
		log.info("userVO : " + usersVO);
		log.info("proVO : " + proVO);
		log.info("adresVO : " + adresVO);
		Map<String, Object> map = new HashedMap();
		
		//프로필사진 업로드 처리
		MultipartFile multipartFile = proVO.getUploadFile();
//		log.info("multipartFile 처음 : " + multipartFile);
		String uploadFolder = "c:\\upload";
		File uploadPath = new File(uploadFolder, getFolder());
		if(!uploadPath.exists()) {
			uploadPath.mkdirs();
		}
		String uploadFileName = multipartFile.getOriginalFilename();
//		log.info("uploadFileName 전 : " + uploadFileName);
		UUID uuid = UUID.randomUUID();
		uploadFileName = uuid.toString() + "_" + uploadFileName;
//		log.info("uploadFileName 후 : " + uploadFileName);
		File saveFile = new File(uploadPath, uploadFileName);
		try {
			multipartFile.transferTo(saveFile);
		} catch (IllegalStateException | IOException e) {
			log.info(e.getMessage());
		}
		log.info("saveFile : " + saveFile);
		String url = "/" + getFolder().replace("\\", "/") + "/" + uploadFileName;
		log.info("url : " + url);
		map.put("userId", usersVO.getUserId());
		map.put("userNcnm", usersVO.getUserNcnm());
		map.put("proMbtlnum", proVO.getProMbtlnum());
		map.put("sexdstnTy", proVO.getSexdstnTy());
		map.put("email", proVO.getEmail());
		map.put("spcltyRealmCode", proVO.getSpcltyRealmCode());
		map.put("proProflPhoto", url);
		map.put("userNm", usersVO.getUserNm());
		map.put("userPassword", usersVO.getUserPassword());
		map.put("adres", adresVO.getAdres());
		map.put("detailAdres", adresVO.getDetailAdres());
		map.put("zip", adresVO.getZip());
		
		int result = this.proJoinService.proInsert(map);
		log.info("회원가입 여부 : " + result);
		
		return "welcome";
	}
	
	//프로 로그인
	@ResponseBody
	@PostMapping("/proLogin")
	public UsersVO proLogin(String userId, String userPassword, HttpServletRequest request) {
		Map<String, Object> userMap = new HashedMap();
		userMap.put("userId", userId);
		userMap.put("userPassword", userPassword);
		
		UsersVO usersVO = this.proJoinService.proLogin(userMap);
		
		HttpSession session = request.getSession();
		if(usersVO != null) {
			session.setAttribute("proSession", usersVO);
		}else {
			session.setAttribute("proSession", null);
		}
		
		return usersVO;
	}
	
	//프로 로그아웃
	@GetMapping("/proLogout")
	public String proLogout(HttpSession session) {
		session.removeAttribute("proSession");
		
		return "main";
	}
	
	public String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date);
		log.info(str);
		return str.replace("-", File.separator);
	}
}
